1) MATCH route = allShortestPaths((Darjeeling:town {name:'Darjeeling'})-[*]->(Sandakphu:peak {name:'Sandakphu'})) RETURN route
2) MATCH route = allShortestPaths((Darjeeling:town {name:'Darjeeling'})-[*]->(Sandakphu:peak {name:'Sandakphu'})) WHERE ALL (r IN RELATIONSHIPS(route) WHERE r.winter = "true") RETURN route
3) MATCH route = (Darjeeling:town {name:'Darjeeling'})-[*]->(Sandakphu:peak {name:'Sandakphu'}) RETURN DISTINCT route, reduce(counter = 0, i IN RELATIONSHIPS(route) | counter + i.distance) AS distance ORDER BY distance ASC
4) MATCH route = (Darjeeling:town {name:'Darjeeling'})-[:twowheeler *]->(destination) WHERE ALL (r IN RELATIONSHIPS(route) WHERE r.summer = "true") RETURN DISTINCT destination

5) MATCH (airport)<-[:ORIGIN]-(:Flight) RETURN airport, count(*) AS flights ORDER BY flights DESC

Dla kolejnych zadań tworzę dodatkową relację dla lotniska. Lotnisko - Połączenie. Połączenie przechowuje informacje o dacie wylotu, cenie biletu, klasie biletu.

MATCH (start:Airport)<-[:ORIGIN]-(flight:Flight)-[:DESTINATION]->(destination:Airport)
MATCH (ticket:Ticket)-[:ASSIGN]->(flight)
WITH start, flight, destination, ticket
MERGE (start)-[connection:CONNECTION {date: flight.date, price: ticket.price, class: ticket.class}]->(destination)
RETURN connection

6) MATCH path = ((lax :Airport{name: "LAX"})-[connection :CONNECTION*..3]->(destination :Airport))
	WITH lax, EXTRACT(node IN NODES(path) | node.name) AS finalPath, LENGTH(path) AS length, destination, REDUCE(finalPrice = 0, c IN connection | finalPrice + c.price) AS finalPrice
	WHERE finalPrice < 3000
	RETURN DISTINCT destination
7) MATCH path = ((lax :Airport{name: "LAX"})-[connection :CONNECTION*..3]->(destination :Airport{name: "DAY"}))
	WITH lax, EXTRACT(node IN NODES(path)| node.name) as finalPath, LENGTH(path) as length, destination, REDUCE(finalPrice = 0, c IN connection | finalPrice + c.price) AS finalPrice
	RETURN lax, finalPath, destination, finalPrice
	ORDER BY finalPrice
8) MATCH path = ((lax :Airport{name: "LAX"})-[connection :CONNECTION*..3]->(destination :Airport{name: "DAY"}))
	WITH lax, EXTRACT(node IN NODES(path)| node.name) as finalPath, LENGTH(path) as length, destination, REDUCE(finalPrice = 0, c IN connection | finalPrice + c.price) AS finalPrice
	RETURN lax, finalPath, destination, finalPrice
	ORDER BY finalPrice
	LIMIT 1
9) MATCH (airport :Airport)-[:DESTINATION|:ORIGIN]-(flight :Flight)
	RETURN flight.airline, count(DISTINCT airport) AS counter
	ORDER BY counter
10) MATCH path = ((start :Airport)-[connection :CONNECTION*..2]->(destination :Airport))
	WITH path, start, connection, destination
	WHERE ALL(node1 IN NODES(path) WHERE size(filter(node2 IN NODES(path) WHERE node2 = node1)) = 1)
	WITH start, EXTRACT(node in NODES(path) | node.name) AS finalPath, LENGTH(path) as length, destination, REDUCE(finalPrice = 0, c IN connection | finalPrice + c.price) AS finalPrice
	WHERE length = 2
	RETURN start, finalPath, destination, finalPrice
	ORDER BY finalPrice
	LIMIT 1